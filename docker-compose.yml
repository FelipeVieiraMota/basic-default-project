services:

  infra-analytics: # Spring Boot Admin
    build: ./infra-analytics
    ports:
      - "10000:10000"
    networks: [backend]
    environment:
      SPRING_PROFILES_ACTIVE: docker
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://infra-analytics:10000/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 10

  infra-discovery: # Eureka
    build: ./infra-discovery
    ports:
      - "8761:8761"
    networks: [backend]
    environment:
      SPRING_PROFILES_ACTIVE: docker
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://infra-discovery:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 10

  infra-gateway: # Spring Cloud Gateway
    build: ./infra-gateway
    ports:
      - "80:80"
    networks: [backend]
    depends_on:
      infra-discovery:
        condition: service_healthy
      infra-analytics:
        condition: service_healthy
      keycloak:
        condition: service_started
    environment:
      SPRING_PROFILES_ACTIVE: docker
      # Eureka
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://infra-discovery:8761/eureka/
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "true"
      EUREKA_CLIENT_FETCH_REGISTRY: "true"
      # SCG discovery locator
      SPRING_CLOUD_GATEWAY_DISCOVERY_LOCATOR_ENABLED: "true"
      SPRING_CLOUD_GATEWAY_DISCOVERY_LOCATOR_LOWER_CASE_SERVICE_ID: "true"
      # Spring Boot Admin
      SPRING_BOOT_ADMIN_CLIENT_URL: http://infra-analytics:10000
      # Keycloak config (match your Keycloak realm & client)
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER_URI: http://keycloak:11000/realms/myrealm
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_CLIENT_ID: gateway
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_CLIENT_SECRET: mysecret

  pgadmin:
    image: dpage/pgadmin4:8
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks: [backend]

  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    networks: [backend]
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h 127.0.0.1 -U postgres -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 20

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    ports:
      - "19000:9000"
    environment:
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-defaultpassword123}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Allows Portainer to access Docker daemon
      - portainer_data:/data
    networks: [backend]

  keycloak:
    image: quay.io/keycloak/keycloak:26.0.5
    command: start-dev
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KC_BOOTSTRAP_ADMIN_USERNAME:-admin}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KC_BOOTSTRAP_ADMIN_PASSWORD:-admin}
    ports:
      - "11000:8080"
    networks: [backend]
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "timeout 2 bash -lc 'true' >/dev/null 2>&1 || exit 0; exec 3<>/dev/tcp/127.0.0.1/8080; echo -e 'GET /health/ready HTTP/1.1\r\nHost: localhost\r\n\r\n' >&3; head -n1 <&3 | grep -q 200" ]
      interval: 10s
      timeout: 5s
      retries: 10

networks:
  backend:
    driver: bridge

volumes:
  postgres_data:
  portainer_data: